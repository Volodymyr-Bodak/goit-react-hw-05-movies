{"version":3,"file":"static/js/385.35841e50.chunk.js","mappings":"6LAqCA,UAlCA,YAA4B,IAAZA,EAAW,EAAXA,QACd,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAiBC,EAAjB,KAaA,OAXAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,IAAA,6CAC6CL,EAD7C,sDAEGM,MAAK,SAAAC,GACJJ,EAAQI,EAASC,KAAKC,KACvB,IACAC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EACf,GACJ,GAAE,CAACX,KAGF,4BACE,iCACCE,EAASW,OAAS,GACjB,wBACGX,EAASY,KAAI,SAAAC,GAAK,OACjB,2BACE,gBAAKC,IAAG,0CAAqCD,EAAME,cAAgBC,IAAKH,EAAMI,QAC9E,wBAAKJ,EAAMI,QACX,uBAAIJ,EAAMK,cAHHL,EAAMM,GADE,OASrB,4CAIP,C,wGCgCD,UA7DA,WACE,IAAQrB,GAAYsB,EAAAA,EAAAA,MAAZtB,QAER,GAAwCC,EAAAA,EAAAA,UAAS,CAAC,GAAlD,eAAOsB,EAAP,KAAqBC,EAArB,KACA,GAAkCvB,EAAAA,EAAAA,UAAS,MAA3C,eAAOwB,EAAP,KAAkBC,EAAlB,KACA,GAA0CzB,EAAAA,EAAAA,WAAS,GAAnD,eAAO0B,EAAP,KAAsBC,EAAtB,KACA,GAAgD3B,EAAAA,EAAAA,WAAS,GAAzD,eAAO4B,EAAP,KAAyBC,EAAzB,KAsBA,OApBA1B,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,IAAA,6CAC6CL,EAD7C,8CAEGM,MAAK,SAAAC,GACJiB,EAAgBjB,EAASC,MACzBkB,EAAanB,EAASC,KAAKuB,aAC5B,IACArB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EACf,GACJ,GAAE,CAACX,KAWF,4BACE,gBAAKgC,UAAU,YAAf,UACE,SAAC,KAAD,CAAMC,GAAG,IAAT,2BAEF,gBAAKD,UAAU,YAAf,UACE,SAAC,KAAD,CAAMC,GAAG,UAAT,uBAEF,wBAAKV,EAAaW,SAClB,gBAAKlB,IAAG,0CAAqCO,EAAaY,aAAejB,IAAKK,EAAaW,SAC3F,uBAAIX,EAAaa,YACjB,oCACWb,EAAac,QAAUd,EAAac,OAAOvB,KAAI,SAAAwB,GAAK,OAAIA,EAAMnB,IAAV,IAAgBoB,KAAK,SAErE,OAAdd,IACC,wCAAgBA,MAGlB,SAAC,KAAD,CAAMQ,GAAG,IAAIO,QA1BY,WAC3BZ,GAAkBD,EACnB,EAwBG,SACGA,EAAgB,YAAc,cAGhCA,IAAiB,SAAC,UAAD,CAAM3B,QAASA,KAEjC,SAAC,KAAD,CAAMiC,GAAG,IAAIO,QA5Be,WAC9BV,GAAqBD,EACtB,EA0BG,SACGA,EAAmB,eAAiB,iBAGtCA,IAAoB,SAAC,UAAD,CAAS7B,QAASA,MAG5C,C,qEC7BD,UAjCA,YAA+B,IAAZA,EAAW,EAAXA,QACjB,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOwC,EAAP,KAAmBC,EAAnB,KAaA,OAXAtC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,IAAA,6CAC6CL,EAD7C,sDAEGM,MAAK,SAAAC,GACJmC,EAAcnC,EAASC,KAAKmC,QAC7B,IACAjC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EACf,GACJ,GAAE,CAACX,KAGF,4BACE,oCACCyC,EAAW5B,OAAS,GACnB,wBACG4B,EAAW3B,KAAI,SAAA8B,GAAM,OACpB,2BACE,uBAAIA,EAAOC,WACX,oCAAYD,EAAOE,YAFZF,EAAOvB,GADI,OAQxB,+CAIP,C","sources":["components/Cast.js","components/MovieDetails.js","components/Reviews.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nfunction Cast({ movieId }) {\n  const [castList, setCast] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=b1d75cfaae6b922289a72c3eab080e3a`)\n      .then(response => {\n        setCast(response.data.cast);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Cast</h2>\n      {castList.length > 0 ? (\n        <ul>\n          {castList.map(actor => (\n            <li key={actor.id}>\n              <img src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`} alt={actor.name} />\n              <h3>{actor.name}</h3>\n              <p>{actor.character}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No cast found.</p>\n      )}\n    </div>\n  );\n}\n\nexport default Cast;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport Cast from './Cast'; \nimport Reviews from './Reviews'; \n\nfunction MovieDetails() {\n  const { movieId } = useParams();\n\n  const [movieDetails, setMovieDetails] = useState({});\n  const [userScore, setUserScore] = useState(null);\n  const [isCastVisible, setIsCastVisible] = useState(false);\n  const [isReviewsVisible, setIsReviewsVisible] = useState(false);\n\n  useEffect(() => {\n    axios\n      .get(`https://api.themoviedb.org/3/movie/${movieId}?api_key=b1d75cfaae6b922289a72c3eab080e3a`)\n      .then(response => {\n        setMovieDetails(response.data);\n        setUserScore(response.data.vote_average);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }, [movieId]);\n\n  const toggleCastVisibility = () => {\n    setIsCastVisible(!isCastVisible);\n  };\n\n  const toggleReviewsVisibility = () => {\n    setIsReviewsVisible(!isReviewsVisible);\n  };\n\n  return (\n    <div>\n      <div className=\"home-link\">\n        <Link to=\"/\">Go to Home</Link>\n      </div>\n      <div className=\"movielink\">\n        <Link to=\"/movies\">Movies</Link>\n      </div>\n      <h2>{movieDetails.title}</h2>\n      <img src={`https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`} alt={movieDetails.title} />\n      <p>{movieDetails.overview}</p>\n      <p>\n        Genres: {movieDetails.genres && movieDetails.genres.map(genre => genre.name).join(', ')}\n      </p>\n      {userScore !== null && (\n        <p>User Score: {userScore}</p>\n      )}\n\n      <Link to=\"#\" onClick={toggleCastVisibility}>\n        {isCastVisible ? 'Hide Cast' : 'Show Cast'}\n      </Link>\n\n      {isCastVisible && <Cast movieId={movieId} />}\n\n      <Link to=\"#\" onClick={toggleReviewsVisibility}>\n        {isReviewsVisible ? 'Hide Reviews' : 'Show Reviews'}\n      </Link>\n\n      {isReviewsVisible && <Reviews movieId={movieId} />}\n    </div>\n  );\n}\n\nexport default MovieDetails;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nfunction Reviews({ movieId }) {\n  const [reviewList, setReviewList] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=b1d75cfaae6b922289a72c3eab080e3a`)\n      .then(response => {\n        setReviewList(response.data.results);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Reviews</h2>\n      {reviewList.length > 0 ? (\n        <ul>\n          {reviewList.map(review => (\n            <li key={review.id}>\n              <p>{review.content}</p>\n              <p>Author: {review.author}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No reviews found.</p>\n      )}\n    </div>\n  );\n}\n\nexport default Reviews;\n"],"names":["movieId","useState","castList","setCast","useEffect","axios","then","response","data","cast","catch","error","console","length","map","actor","src","profile_path","alt","name","character","id","useParams","movieDetails","setMovieDetails","userScore","setUserScore","isCastVisible","setIsCastVisible","isReviewsVisible","setIsReviewsVisible","vote_average","className","to","title","poster_path","overview","genres","genre","join","onClick","reviewList","setReviewList","results","review","content","author"],"sourceRoot":""}